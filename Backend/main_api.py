from fastapi import FastAPI, HTTPException

from Backend.API_classes import UserCreate, UserPhysical, UserBlood, UserSleep

app = FastAPI()

user_db = {}
physical_activity_db = {}
sleep_activity_db = {}
blood_test_db = {}


def get_new_id():  # Temporary solution to generate new ids until the db is implemented
    i = 0
    while True:
        i += 1
        yield i


@app.post('/users/')
def create_user(user: UserCreate):
    user_to_db = {
        'name': user.name,
        'age' : user.age,
        'id'  : next(get_new_id())  # should be autogenerated from db
    }
    user_db[user_to_db['id']] = user_to_db  # will be replaced with db insert

    return {'message': f'User {user.name} created successfully', 'user_id': user_to_db['id']}


@app.post('/physical/')
def add_new_activity(activity: UserPhysical):
    id = activity.user_id
    user = user_db.get(id, None)
    if not user:
        raise HTTPException(status_code=404, detail='User not found')
    activity_to_db = {
        'user_id'                      : id,
        'id'                           : next(get_new_id()),
        'steps'                        : activity.steps,
        'cardio_time_session_minutes'  : activity.cardio_time_session_minutes,
        'strength_time_session_minutes': activity.strength_time_session_minutes,
        'session_date'                 : activity.session_date
    }
    physical_activity_db[activity_to_db['id']] = activity_to_db  # will be replaced with db insert

    return {'message': f'Added Physical  to user {user.name}'}


@app.post('/blood/')
def add_new_blood_test(blood: UserBlood):
    id = blood.user_id
    user = user_db.get(id, None)
    if not user:
        raise HTTPException(status_code=404, detail='User not found')
    blood_to_db = {
        'user_id'            : id,
        'id'                 : next(get_new_id()),
        'RBC'                : blood.RBC,
        'WBC'                : blood.WBC,
        'glucose_level'      : blood.glucose_level,
        'cholesterol_level'  : blood.cholesterol_level,
        'triglycerides_level': blood.triglycerides_level,
        'test_date'          : blood.test_date
    }
    blood_test_db[blood_to_db['id']] = blood_to_db  # will be replaced with db insert

    return {'message': f'Added blood test to user {user.name}'}


@app.post('/sleep/')
def add_new_sleep(sleep: UserSleep):
    id = sleep.user_id
    user = user_db.get(id, None)
    if not user:
        raise HTTPException(status_code=404, detail='User not found')
    sleep_to_db = {
        'user_id'         : id,
        'id'              : next(get_new_id()),
        'sleep_hours'     : sleep.sleep_hours,
        'avg_heart_rate'  : sleep.avg_heart_rate,
        'avg_oxygen_level': sleep.avg_oxygen_level,
        'sleep_date'      : sleep.sleep_date
    }
    sleep_activity_db[sleep_to_db['id']] = sleep_to_db  # will be replaced with db insert

    return {'message': f'Added blood test to user {user.name}'}


@app.get('/users/{user_id}')
def get_user(user_id: int):
    user = user_db.get(user_id, None)  # will be replaced with db query
    if not user:
        raise HTTPException(status_code=404, detail='User not found')
    return {'id': user.id, 'name': user.name, 'age': user.age}


@app.get('/health/{user_id}')
def get_health(user_id: int):
    user = user_db.get(user_id, None)
    if not user:
        raise HTTPException(status_code=404, detail='User not found')
    physical_activity = [v for k, v in physical_activity_db.items() if v['user_id'] == user_id]
    sleep_activity = [v for k, v in sleep_activity_db.items() if v['user_id'] == user_id]
    blood_test = [v for k, v in blood_test_db.items() if v['user_id'] == user_id]
    return {
        'user'             : user,
        'physical_activity': physical_activity,
        'sleep_activity'   : sleep_activity,
        'blood_test'       : blood_test
    }


@app.put('/users/{user_id}')
def update_user(user_id: int, user: UserCreate):
    db_user = user_db.get(user_id, None)
    if not db_user:
        raise HTTPException(status_code=404, detail='User not found')
    db_user.name = user.name
    db_user.age = user.age
    user_db[user_id] = db_user  # will be replaced with db update
    return {'message': f'User {user.name} updated successfully'}


@app.delete('/users/{user_id}')
def delete_user(user_id: int):
    db_user = user_db.get(user_id, None)
    if not db_user:
        raise HTTPException(status_code=404, detail='User not found')
    user_db.pop(user_id)  # will be replaced with db delete
    global physical_activity_db, sleep_activity_db, blood_test_db  # will be replaced with db delete
    physical_activity_db = {k: v for k, v in physical_activity_db.items() if v['user_id'] != user_id}
    sleep_activity_db = {k: v for k, v in sleep_activity_db.items() if v['user_id'] != user_id}
    blood_test_db = {k: v for k, v in blood_test_db.items() if v['user_id'] != user_id}
    return {'message': f'User {db_user.name} deleted successfully with all related data'}


@app.get('/get_health_score/{user_id}')
def get_health_score(user_id: int):
    # will have to wait for the other endpoints to be implemented
    return {'health_score': 100}
