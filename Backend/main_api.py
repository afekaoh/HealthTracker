from fastapi import FastAPI, HTTPException

from API_classes import UserCreate, UserPhysical, UserBlood, UserSleep

app = FastAPI()

user_db = {}
physical_activity_db = {}
sleep_activity_db = {}
blood_test_db = {}


@app.post('/users/')
def create_user(user: UserCreate):
    user_to_db = {
        'name': user.name,
        'age' : user.age,
        'id'  : 1  # should be autogenerated from db
    }
    user_db[user_to_db['id']] = user_to_db  # will be replaced with db insert

    return {'message': f'User {user.name} created successfully'}


@app.get('/users/{user_id}')
def get_user(user_id: int):
    user = user_db.get(user_id, None)  # will be replaced with db query
    if not user:
        raise HTTPException(status_code=404, detail='User not found')
    return {'id': user.id, 'name': user.name, 'age': user.age}


@app.put('/users/{user_id}')
def update_user(user_id: int, user: UserCreate):
    db_user = user_db.get(user_id, None)
    if not db_user:
        raise HTTPException(status_code=404, detail='User not found')
    db_user.name = user.name
    db_user.age = user.age
    user_db[user_id] = db_user  # will be replaced with db update
    return {'message': f'User {user.name} updated successfully'}


@app.delete('/users/{user_id}')
def delete_user(user_id: int):
    db_user = user_db.get(user_id, None)
    if not db_user:
        raise HTTPException(status_code=404, detail='User not found')
    user_db.pop(user_id)  # will be replaced with db delete
    global physical_activity_db, sleep_activity_db, blood_test_db # will be replaced with db delete
    physical_activity_db = {k: v for k, v in physical_activity_db.items() if v['user_id'] != user_id}
    sleep_activity_db = {k: v for k, v in sleep_activity_db.items() if v['user_id'] != user_id}
    blood_test_db = {k: v for k, v in blood_test_db.items() if v['user_id'] != user_id}
    return {'message': f'User {db_user.name} deleted successfully with all related data'}


@app.get('/get_health_score/{user_id}')
def get_health_score(user_id: int):
    # will have to wait for the other endpoints to be implemented
    return {'health_score': 100}
